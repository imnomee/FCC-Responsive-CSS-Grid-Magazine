*,
::before,
::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

html {
    /* Create an html selector and give it a font-size property set to 62.5%.
    This will set the default font size for your web page to 10px (the browser default is 16px).
    This will make it easier for you to work with rem units later, as 2rem would be 20px. */
    font-size: 62.5%;
}

body {
    font-family: Baskervville, serif;
    color: linen;
    background-color: rgb(20, 30, 40);
    padding: 30px;
}

h1 {
    font-family: Anton, sans-serif;
}

h2,
h3,
h4,
h5,
h6 {
    font-family: Raleway, sans-serif;
}

a {
    text-decoration: none;
    color: linen;
}

/* CSS Grid offers a two-dimensional grid-based layout,
 allowing you to center items horizontally and vertically
 while still retaining control to do things like overlap elements.
 
 CSS Grid is similar to Flexbox in that
 it has a special property for both the parent and child elements.
 Set the content to have a three-column layout by adding a
 
 grid-template-columns
 
 property with a value of
 
 1fr 94rem 1fr
 
 This will create three columns where the middle column is 94rem wide,
 and the first and last columns are both 1 fraction of the
 remaining space in the grid container.
 
 Use the minmax function to make your columns responsive on any device.
 The minmax function takes two arguments,
 the first being the minimum value and the second being the maximum.
 These values could be a length, percentage, fr, or even a keyword like max-content.
 To add space between rows in the grid layout, you can use the row-gap property.
 
 One option is the grid-column property,
 which is shorthand for grid-column-start and grid-column-end.
 The grid-column property tells the grid item which grid line to start and end at
 
 The CSS repeat() function is used to repeat a value,
 rather than writing it out manually, and is helpful for grid layouts.
 For example, setting the
 
 grid-template-columns property to repeat(20, 200px)

 would create 20 columns each 200px wide.
 
 Much like Flexbox, with CSS Grid you can align the content of grid items
 with align-items and justify-items.
 align-items will align child elements along the column axis, and
 justify-items will align child elements along the row axis.
 
 The gap property is a shorthand way to set the value
 of column-gap and row-gap at the same time. If given one value,
 it sets the column-gap and row-gap both to that value.
 If given two values, it sets the row-gap to the
 first value and the column-gap to the second.
 
 The place-items property can be used to set
 the align-items and justify-items values at the same time.
 The place-items property takes one or two values.
 If one value is provided, it is used for both the align-items and justify-items properties.
 If two values are provided,
 the first value is used for the align-items property and
 the second value is used for the justify-items property.*/

main {
    display: grid;
    grid-template-columns: minmax(2rem, 1frJ) minmax(min-content, 94rem) minmax(
            2rem,
            1fr
        );
    row-gap: 3rem;
}

.heading {
    grid-column: 2/3;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    row-gap: 1.5rem;
}
/*  
Your .text element is not a CSS Grid,
but you can create columns within an element without using Grid by using the
column-width property.
*/
.text {
    grid-column: 2/3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    column-width: 25rem;
    text-align: justify;
}
.hero {
    grid-column: 1 / -1;
    position: relative;
}
/* The object-fit property tells the browser how to position the element within its container.
In this case, cover will set the image to fill the container,
cropping as needed to avoid changing the aspect ratio. */
img {
    width: 100%;
    object-fit: cover;
}
.hero-title {
    font-size: 8rem;
    color: orangered;
    text-align: center;
}

.hero-subtitle {
    font-size: 2.4rem;
    color: orangered;
    text-align: center;
}

.author {
    font-family: Raleway, sans-serif;
    font-size: 2rem;
}

.author-name a:hover {
    background-color: #306203;
}

.publish-date {
    color: rgba(255, 255, 255, 0.5);
}
.social-icons {
    font-size: 3rem;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    align-items: center;
}
/* The ::first-letter pseudo-selector allows you to target the first letter
in the text content of an element. */
.first-paragraph::first-letter {
    font-size: 6rem;
    color: orangered;
    /* The other text has been shifted out of place.
    Move it into position by giving the .first-paragraph::first-letter selector
    a float property  */
    float: left;
    margin-right: 1rem;
}

hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
}
.quote {
    font-size: 2.4rem;
    color: #00beef;
    text-align: center;
    font-family: Raleway, sans-serif;
}

.quote::before {
    content: '" ';
}
.quote::after {
    content: ' "';
}

.text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;
}

.lists {
    list-style-type: none;
    margin-top: 2rem;
}
.lists li {
    margin-bottom: 1.5rem;
}

.lis-title,
.list-subtitle {
    color: #00beef;
}

.image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(3, min-content);
    gap: 2rem;
    place-items: center;
}

.image-1,
.image-3 {
    grid-column: 1/-1;
}

@media only screen and (max-width: 720px) {
    body {
        padding: 20px;
    }
    .image-wrapper {
        grid-template-columns: 1fr;
    }
}

@media only screen and(max-width: 600px) {
    .text-with-images {
        grid-template-columns: 1fr;
    }
}

@media only screen and (max-width: 550px) {
    body {
        padding: 15px;
    }
    .hero-title {
        font-size: 6rem;
    }
    .hero-subtitle,
    .author,
    .quote,
    .list-title {
        font-size: 1.8rem;
    }
    .social-icons {
        font-size: 2rem;
    }
    .text {
        font-size: 1.6rem;
    }
}

@media only screen and (max-width: 450px) {
    body {
        padding: 10px;
    }
    .hero-title {
        font-size: 4.5rem;
    }
}
